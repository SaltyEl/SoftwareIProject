package controller;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.stage.Stage;
import model.Inventory;
import model.Part;
import model.Product;

import java.io.IOException;
import java.net.URL;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.Scanner;

/**
 * The controller for interaction between Product.java and AddProduct.fxml<br><br>
 * JavaDoc Document is included with submission.
 *
 * @author Blake Ramsey
 */
public class AddProduct implements Initializable {


    public TextField addProductIdTxt;
    public TextField addProductNameTxt;
    public TextField addProductMaxTxt;
    public TextField addProductMinTxt;
    public TextField addProductInvTxt;
    public TextField addProductPriceTxt;
    public TextField addProductSearchTxt;
    public Button addProductAddBtn;
    public Button addProductRemoveButton;
    public Button addProductSaveButton;
    public Button addProductCancelBtn;
    public TableColumn<Part, Integer> associatedPartIdCol;
    public TableColumn<Part, String> associatedPartNameCol;
    public TableColumn<Part, Integer> associatedPartInvCol;
    public TableColumn<Part, Double> associatedPartCostCol;
    public TableView<Part> partsTableView1;
    public TableColumn<Part, Integer> partIdCol1;
    public TableColumn<Part, String> partNameCol1;
    public TableColumn<Part, Integer> partInventoryCol1;
    public TableColumn<Part, Double> partCostCol1;
    public TableView<Part> associatedPartsTableView;

    private ObservableList<Part> partsList;

    /**
     * This method initializes the AddProduct controller after root element has been processed.
     *
     * @param url Resolves relative paths for root object, or null if location is not known.
     * <br>
     * @param resourceBundle Resources used to localize root object, or null if root object was not localized.
     */
    @Override
    public void initialize(URL url, ResourceBundle resourceBundle) {

        partsList = FXCollections.observableArrayList();

        //Parts Table - Displays Part ID, Name, Inventory and Price to table for each part.
        partsTableView1.setItems(Inventory.getAllParts());
        partIdCol1.setCellValueFactory(new PropertyValueFactory<>("id"));
        partNameCol1.setCellValueFactory(new PropertyValueFactory<>("name"));
        partInventoryCol1.setCellValueFactory(new PropertyValueFactory<>("stock"));
        partCostCol1.setCellValueFactory(new PropertyValueFactory<>("price"));

        //Associated Parts Table
        associatedPartsTableView.setItems(partsList);
        associatedPartIdCol.setCellValueFactory(new PropertyValueFactory<>("id"));
        associatedPartNameCol.setCellValueFactory(new PropertyValueFactory<>("name"));
        associatedPartInvCol.setCellValueFactory(new PropertyValueFactory<>("stock"));
        associatedPartCostCol.setCellValueFactory(new PropertyValueFactory<>("price"));


        System.out.println("Add Product Initialized");
    }

    /**
     * This method directs user to the next appropriate window.<br><br> LOGICAL ERROR - Deleted redundant ActionEvent field, as
     * 'buttonClicked' Button was already performing the same duty.
     *
     * @param fxmlDoc The location of the window that should be loaded.
     * @param buttonClicked The button that is clicked.
     * @param width The width of window to be loaded.
     * @param height The height of window to be loaded.
     * @throws IOException
     */
    private void windowLoader (String fxmlDoc, Button buttonClicked, double width, double height) throws IOException {
        FXMLLoader fxmlLoader = new FXMLLoader(AddProduct.class.getResource(fxmlDoc.toString()));
        Scene scene = new Scene(fxmlLoader.load(), width, height);
        Stage stage = (Stage) buttonClicked.getScene().getWindow();
        stage.setScene(scene);
        stage.show();
    }

    /**
     * This method adds part to Observable partsList, which can then be added to product if the user clicks
     * the save button, and not the cancel button. This method updates associated parts table view to show parts
     * added.
     *
     * @param actionEvent The actionEvent generated by Add button being clicked.
     * @throws IOException
     */
    public void onPartAddClick(ActionEvent actionEvent) throws IOException {
        Part partToAdd = partsTableView1.getSelectionModel().getSelectedItem();
        if (partToAdd != null) {
            partsList.add(partToAdd);
        }
    }

    /**
     * This method invokes windowloader method in order to direct user back to previous screen.
     *
     * @param actionEvent The actionEvent generated by Cancel button being clicked.
     * @throws IOException
     */
    public void onCancelBtnClick(ActionEvent actionEvent) throws IOException {
        windowLoader("/view/main-window.fxml", addProductCancelBtn, 950, 400);
    }

    //Functionality for adding new product

    /**
     * This method take information from text fields and partsList and uses them to generate
     * a new product, with appropriate exceptions being thrown when fields are filled in incorrectly. This method invokes windowloader method in order to return
     * to previous window.<br><br> LOGIC ERROR - I had 'if (min > max)', which needed to be corrected as it allowed min
     * and max to be the same number, which would not make sense.
     *
     * @param actionEvent The actionEvent generated by the Save button being clicked.
     * @throws IOException
     */
    public void onProductAddSaveClick(ActionEvent actionEvent) throws IOException {
        try {
            int id;
            if (!Inventory.getAllProducts().isEmpty()) {
                Product product = Inventory.getAllProducts().get(Inventory.getAllProducts().size() - 1);
                int tempId = product.getId();
                id = tempId + 1;
            } else {
                id = 1;
            }
            String name = addProductNameTxt.getText();
            if (name.isEmpty()) {
                throw new Exception("Product must have a name.");
            }
            double price = Double.parseDouble(addProductPriceTxt.getText());
            int stock = Integer.parseInt(addProductInvTxt.getText());
            int min = Integer.parseInt(addProductMinTxt.getText());
            int max = Integer.parseInt(addProductMaxTxt.getText());

            if (min >= max) {
                throw new Exception("Min must be less than max");
            }
            if (stock < min || stock > max) {
                throw new Exception("Inventory must be between min and max");
            }

            Product newProduct = new Product(id, name, price, stock, min, max);
            if (!(partsList.isEmpty())) {
                for (Part part : partsList) {
                    newProduct.addAssociatedPart(part);
                }
            }
            Inventory.addProduct(newProduct);

            windowLoader("/view/main-window.fxml", addProductSaveButton, 950, 400);
        }
        catch(NumberFormatException nfe) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setContentText("Please enter a valid value for each text field.");
            alert.showAndWait();
        }
        catch (Exception e) {
            Alert alert = new Alert(Alert.AlertType.ERROR);
            alert.setTitle("Error");
            alert.setContentText(e.getMessage());
            alert.showAndWait();
        }
    }

    /**
     * This method allows users to search for parts in Inventories allParts list, and searches for a parts
     * name (or partial name) and ID.
     * <br>
     * <br>
     * LOGIC ERROR - I had to use Scanner function in order to properly determine if there was an integer in the
     * searchText, as otherwise my Exception message was not loading properly.
     *
     * @param actionEvent This actionEvent is generated by searching (i.e. hitting Return / Enter) in the search bar.
     */
    public void getPartsResultHandler1(ActionEvent actionEvent) {
        String searchText = addProductSearchTxt.getText();

        ObservableList<Part> returnedParts = Inventory.lookUpPart(searchText);
        Part idPartResult = null;
        try {
            if (returnedParts.size() != 0) {
                partsTableView1.setItems(returnedParts);
            }
            else {
                Scanner scnr = new Scanner(searchText);
                if (scnr.hasNextInt()){
                    int textNumSearch = Integer.parseInt(searchText);
                    idPartResult = Inventory.lookUpPart(textNumSearch);
                    if (idPartResult != null) {
                        TableView.TableViewSelectionModel<Part> selectionModel = partsTableView1.getSelectionModel();
                        selectionModel.select(idPartResult);
                    }
                }
            }
            if (idPartResult == null && returnedParts.isEmpty()) {
                    Alert alert = new Alert(Alert.AlertType.WARNING);
                    alert.setTitle("Parts");
                    alert.setContentText("No matching part found");
                    alert.showAndWait();
            }
        }
        catch (NumberFormatException e){
            //Do Nothing
        }
    }

    /**
     * This method removes part from partsList. Confirmation is needed to remove part.
     *
     * @param actionEvent This actionEvent is initiated by clicking Remove button.
     */
    public void onRemoveAssociatedPartClick(ActionEvent actionEvent) {
        try {
            Part partToRemove = associatedPartsTableView.getSelectionModel().getSelectedItem();
            if (partToRemove != null) {
                Alert alert = new Alert(Alert.AlertType.CONFIRMATION, "Are you sure you want to remove part?");
                Optional<ButtonType> result = alert.showAndWait();

                if (result.isPresent() && result.get() == ButtonType.OK) {
                    partsList.remove(partToRemove);
                }
            }
        }
        catch (Exception e) {
            //Do nothing.
        }
    }
}
